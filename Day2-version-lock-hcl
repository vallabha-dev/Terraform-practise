############# Day 2############
Creae new directory day2-version-lock-hcl
Go to 'day2-version-lock-hcl' directory
#Configure your aws account with access key and secret key

#### provider.tf ####
Create provider.tf file
provider "aws"{
region = "mention your region"
}
 #### main.tf #####
Create main.tf
resource "aws_instance" "name"{
ami = "ami id"
instance_type = "t2.micro"

}
Go to Day2 directory
#Commands
terraform init
[you will see latest versions in .terraform file, you can change versions with 'terraform init -upgrade' command, 
give your version in provider.tf file
terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "6.14.1"
    }
  }
}

provider "aws" {
  # Configuration options
}
]

#### variables.tf ####
Create variables.tf file
variable "ami_id"{                 #you can give anyname for variables
description = "inserting the ami values to main.tf"         #opitonal
type = "string"
default = "enter  ami_id"
}
variable "server_type" {
description = "this is instance type value"
type = "string"
default = "t2.micro"
}

Now inside main.tf file change 
ami = var.ami_id
instance_type = var.server_type

#### output.tf ####
Create output.tf file
output "public_ip"{
value = aws_instance.dev.public_ip
}

output "private_ip"{
value = aws_instance.test.private_ip
}

when you want to print public ip and private ip of different resource which are coded in output.tf file, you should create two resource names with different names 
 modify main.tf file
Create main.tf
resource "aws_instance" "dev"{
ami = "var.ami_id"
instance_type = "var.server_type"

}

resource "aws_instance" "test"{
ami = "var.ami_id"
instance_type = "var.server_type"

}

Commands {aws configuration if required}
terraform plan
terraform apply

if you want to add one more resource with same ami_id then modift main.tf
resource "aws_instance" "dev"{
ami = "var.ami_id"
instance_type = "var.server_type"
count = 2

}
then
terraform plan
terraform apply 

#####  terraform.tfvars #####
Purpose:
Terraform configurations often use input variables (declared in variables.tf or main.tf) to make code reusable and configurable.
The terraform.tfvars file provides concrete values for those variables so you donâ€™t have to pass them manually every time.

How it works:
Terraform automatically loads terraform.tfvars (and any *.auto.tfvars files) when you run commands like terraform plan or terraform apply.
You donâ€™t need to specify it explicitly unless the file has a different name (then you use -var-file).

example
@variables.tf file
variable "region" {
  description = "AWS region to deploy resources"
  type        = string
}

variable "instance_type" {
  description = "EC2 instance type"
  type        = string
  default     = "t2.micro"
}

@terraform.tfvars file
region        = "us-east-1"
instance_type = "t3.medium"

@main.tf fil
provider "aws" {
  region = var.region
}

resource "aws_instance" "example" {
  ami           = "ami-12345678"
  instance_type = var.instance_type
}
When you run terraf
Terraform doesnâ€™t require the file to be named terraform.tfvars. You can name it anything (like dev.tfvars, prod.tfvars, stage.tfvars). The only difference is:
terraform.tfvars and *.auto.tfvars files are loaded automatically.

If you name it something else (like dev.tfvars), 
Terraform wonâ€™t load it automatically. You just need to tell Terraform to use it.

âœ… How to use dev.tfvars
Run commands with the -var-file flag:
terraform plan -var-file="dev.tfvars"
terraform apply -var-file="dev.tfvars"

ðŸ“Œ Pro tip (for multiple environments)

Keep separate .tfvars files:
dev.tfvars
prod.tfvars
stage.tfvars

Apply accordingly:
terraform apply -var-file="prod.tfvars"
